<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on DevBJ.com</title>
    <link>https://devbj.com/</link>
    <description>Recent content in Home on DevBJ.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Thu, 29 Nov 2018 08:41:44 +0100</lastBuildDate>
    
	<atom:link href="https://devbj.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>사용팁</title>
      <link>https://devbj.com/hugolearntheme/mytips/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devbj.com/hugolearntheme/mytips/</guid>
      <description>그냥 쓰다보면 꼭 그대로 잘 안되고 걸린다. 필요한 내용을 정리해 두자. 🥢 Hugo 활용시 팁 정리 _index.md 파일은 .Kind 는 .section 으로 선택되고, 레이아웃은 list.html 이 선택되어 변환된다. 테마</description>
    </item>
    
    <item>
      <title>W600</title>
      <link>https://devbj.com/w600/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devbj.com/w600/</guid>
      <description>W600-SDK Overview WizFi360 is based on the W600 chip which features ARM Cortex-M3 with 1MB on-chip flash and freeRTOS kernel. This page includes the software development kit (SDK) files, documents, and usage method. This SDK has integrated WizFi360 hardware driver (BSP), RTOS, TCP/IP protocol, Wi-Fi Protocol and other public function modules.
 Software SDK  Official SDK from chip vendor  Download link - WizFi360 Chip SDK (wm_sdk_w60x_g3.02.00_190729.zip)     Software SDK User Manual Basic  SDK User Manual V1.</description>
    </item>
    
    <item>
      <title>Archetypes</title>
      <link>https://devbj.com/hugolearntheme/cont/archetypes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devbj.com/hugolearntheme/cont/archetypes/</guid>
      <description>Using the command: hugo new [relative new content path], you can start a content file with the date and title automatically set. While this is a welcome feature, active writers need more : archetypes.
It is pre-configured skeleton pages with default front matter. Please refer to the documentation for types of page to understand the differences.
Chapter To create a Chapter page, run the following commands
hugo new --kind chapter &amp;lt;name&amp;gt;/_index.</description>
    </item>
    
    <item>
      <title>Markdown syntax</title>
      <link>https://devbj.com/hugolearntheme/cont/markdown/</link>
      <pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate>
      
      <guid>https://devbj.com/hugolearntheme/cont/markdown/</guid>
      <description>This page is a shameful copy of the great Grav original page. Only difference is information about image customization (resizing, add CSS classes&amp;hellip;)
 Let&amp;rsquo;s face it: Writing content for the Web is tiresome. WYSIWYG editors help alleviate this task, but they generally result in horrible code, or worse yet, ugly web pages.
Markdown is a better way to write HTML, without all the complexities and ugliness that usually accompanies it.</description>
    </item>
    
    <item>
      <title>Menu extra shortcuts</title>
      <link>https://devbj.com/hugolearntheme/cont/menushortcuts/</link>
      <pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate>
      
      <guid>https://devbj.com/hugolearntheme/cont/menushortcuts/</guid>
      <description>You can define additional menu entries or shortcuts in the navigation menu without any link to content.
Basic configuration Edit the website configuration config.toml and add a [[menu.shortcuts]] entry for each link your want to add.
Example from the current website:
[[menu.shortcuts]] name = &amp;quot;&amp;lt;i class=&#39;fab fa-github&#39;&amp;gt;&amp;lt;/i&amp;gt; Github repo&amp;quot; identifier = &amp;quot;ds&amp;quot; url = &amp;quot;https://github.com/matcornic/hugo-theme-learn&amp;quot; weight = 10 [[menu.shortcuts]] name = &amp;quot;&amp;lt;i class=&#39;fas fa-camera&#39;&amp;gt;&amp;lt;/i&amp;gt; Showcases&amp;quot; url = &amp;quot;/showcase&amp;quot; weight = 11 [[menu.</description>
    </item>
    
    <item>
      <title>Icons and logos</title>
      <link>https://devbj.com/hugolearntheme/cont/icons/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devbj.com/hugolearntheme/cont/icons/</guid>
      <description>The Learn theme for Hugo loads the Font Awesome library, allowing you to easily display any icon or logo available in the Font Awesome free collection.
Finding an icon Browse through the available icons in the Font Awesome Gallery. Notice that the free filter is enabled, as only the free icons are available by default.
Once on the Font Awesome page for a specific icon, for example the page for the heart, copy the HTML reference and paste into the markdown content.</description>
    </item>
    
    <item>
      <title>Tags</title>
      <link>https://devbj.com/hugolearntheme/cont/tags/</link>
      <pubDate>Thu, 29 Nov 2018 08:41:44 +0100</pubDate>
      
      <guid>https://devbj.com/hugolearntheme/cont/tags/</guid>
      <description>Learn theme support one default taxonomy of gohugo: the tag feature.
Configuration Just add tags to any page:
--- date: 2018-11-29T08:41:44+01:00 title: Theme tutorial weight: 15 tags: [&amp;#34;tutorial&amp;#34;, &amp;#34;theme&amp;#34;] --- Behavior The tags are displayed at the top of the page, in their insertion order.
Each tag is a link to a Taxonomy page displaying all the articles with the given tag.
List all the tags In the config.toml file you can add a shortcut to display all the tags</description>
    </item>
    
    <item>
      <title>Go 둘러보기 - encoding/json 패키지</title>
      <link>https://devbj.com/golangkorea/go-walkthrough/encoding-json-package/</link>
      <pubDate>Sat, 03 Dec 2016 01:02:26 +0900</pubDate>
      
      <guid>https://devbj.com/golangkorea/go-walkthrough/encoding-json-package/</guid>
      <description>Go Walkthrough 시리즈의 Go Walkthrough: encoding/json package를 번역한 글입니다. 좋든 나쁘든, JSON은 인터넷의 인코딩이다. 이것의 공식적인 정의는 냅킨 뒷면에 쓸 수 있을 정도로 간단</description>
    </item>
    
    <item>
      <title>Go 둘러보기 - encoding 패키지</title>
      <link>https://devbj.com/golangkorea/go-walkthrough/encoding-package/</link>
      <pubDate>Wed, 09 Nov 2016 15:33:33 +0900</pubDate>
      
      <guid>https://devbj.com/golangkorea/go-walkthrough/encoding-package/</guid>
      <description>Go Walkthrough 시리즈의 Go Walkthrough: encoding package를 번역한 글입니다. 우리는 이제까지 로우(raw) 바이트 스트림과 제한된 바이트 슬라이스를 다뤄봤지만 단순히 바이트만을</description>
    </item>
    
    <item>
      <title>Go 둘러보기 - bytes &#43; strings 패키지</title>
      <link>https://devbj.com/golangkorea/go-walkthrough/bytes-strings-packages/</link>
      <pubDate>Wed, 02 Nov 2016 18:30:33 +0900</pubDate>
      
      <guid>https://devbj.com/golangkorea/go-walkthrough/bytes-strings-packages/</guid>
      <description>Go Walkthrough 시리즈의 Go Walkthrough: bytes + strings packages를 번역한 글입니다. 우린 지난번 포스트에서 바이트 스트림을 다뤄봤는데 가끔은 제한적인 범위에서, 인메모리 바이트 슬</description>
    </item>
    
    <item>
      <title>Go 둘러보기 - io 패키지</title>
      <link>https://devbj.com/golangkorea/go-walkthrough/io-package/</link>
      <pubDate>Wed, 26 Oct 2016 02:30:33 +0900</pubDate>
      
      <guid>https://devbj.com/golangkorea/go-walkthrough/io-package/</guid>
      <description>Go Walkthrough 시리즈의 Go Walkthrough: io package를 번역한 글입니다. Go는 바이트(bytes)를 사용하여 작업하기 위해 만들어진 프로그래밍 언어이다. 바이트의 리스트</description>
    </item>
    
    <item>
      <title>Go에서 애플리케이션 설계하기</title>
      <link>https://devbj.com/golangkorea/structuring-applications-in-go/</link>
      <pubDate>Mon, 10 Oct 2016 21:11:16 +0900</pubDate>
      
      <guid>https://devbj.com/golangkorea/structuring-applications-in-go/</guid>
      <description>Structuring Applications in Go을 번역한 글입니다. 개요 Go를 배울 때 가장 어려웠던 부분은 애플리케이션을 어떻게 설계하는가였다. Go 이전에, 나는 Rails 애플리케이션을 만들었었는데</description>
    </item>
    
    <item>
      <title>Go와 객체지향</title>
      <link>https://devbj.com/golangkorea/go-start/object-oriented/</link>
      <pubDate>Sun, 02 Oct 2016 00:51:06 +0900</pubDate>
      
      <guid>https://devbj.com/golangkorea/go-start/object-oriented/</guid>
      <description>객체지향 프로그래밍 Go는 클래스(Class)가 없다!! Struct가 Class의 역할을 수행 할 수 있기는 하지만 메서드도 구조체로부터 분리되는 구성을</description>
    </item>
    
    <item>
      <title>Golang의 내부, 6부: 부트스트래핑과 메모리 할당자</title>
      <link>https://devbj.com/golangkorea/golang-internals/part6/</link>
      <pubDate>Tue, 20 Sep 2016 16:20:29 -0400</pubDate>
      
      <guid>https://devbj.com/golangkorea/golang-internals/part6/</guid>
      <description>이 포스트는 Golang 내부 시리즈의 연속이다. Go 런타임을 자세히 이해하는데 열쇠와 같은 부트스트랩 과정을 살펴볼 것이다. 이번에는 시작하는 순서의 두번째 부분을 섭렵해</description>
    </item>
    
    <item>
      <title>Golang의 내부, 5부: 런타임 부트스트랩</title>
      <link>https://devbj.com/golangkorea/golang-internals/part5/</link>
      <pubDate>Mon, 19 Sep 2016 16:20:29 -0400</pubDate>
      
      <guid>https://devbj.com/golangkorea/golang-internals/part5/</guid>
      <description>부트스트래핑 과정은 Go의 런타임이 어떻게 작동하는지를 이해하는데 열쇠와 같은 구실을 한다. Go와 함께 앞으로 나아가고자 한다면 반드시 배워야한다. 그래서 G</description>
    </item>
    
    <item>
      <title>Golang의 내부, 4부: 오브젝트 파일, 그리고 함수 메타데이터</title>
      <link>https://devbj.com/golangkorea/golang-internals/part4/</link>
      <pubDate>Sun, 18 Sep 2016 16:20:29 -0400</pubDate>
      
      <guid>https://devbj.com/golangkorea/golang-internals/part4/</guid>
      <description>오늘은, Func 구조에 대해 좀 더 자세히 들여다 보고 어떻게 가비지 컬렉션이 작동하는지 몇가지 자세한 내용을 논하겠다. 이 포스트는 Golang의 내부, 3부: 링커,</description>
    </item>
    
    <item>
      <title>Golang의 내부, 3부: 링커, 오브젝트 파일, 그리고 재배치</title>
      <link>https://devbj.com/golangkorea/golang-internals/part3/</link>
      <pubDate>Sat, 17 Sep 2016 16:20:29 -0400</pubDate>
      
      <guid>https://devbj.com/golangkorea/golang-internals/part3/</guid>
      <description>오늘은 Go 링커와 오브젝트 파일, 그리고 재배치(relocations)에 대해 얘기해 보자. 이런 것들이 독자들과 무슨 상관이 있을까? 만약 독자가 어떤 대형 프</description>
    </item>
    
    <item>
      <title>Golang의 내부, 2부: Go 컴파일러 들여다 보기</title>
      <link>https://devbj.com/golangkorea/golang-internals/part2/</link>
      <pubDate>Thu, 15 Sep 2016 05:53:48 -0400</pubDate>
      
      <guid>https://devbj.com/golangkorea/golang-internals/part2/</guid>
      <description>독자는 인터페이스 레퍼런스를 통해 변수를 사용할 경우 Go 런타임내에서 어떤 일이 있는지 정확하게 알고 있는가? 이 질문에 쉽게 답할 수 없는 이유는 어떤 인터페이스를 구</description>
    </item>
    
    <item>
      <title>Golang의 내부, 1부: 주요 컨셉트와 프로젝트 구조</title>
      <link>https://devbj.com/golangkorea/golang-internals/part1/</link>
      <pubDate>Tue, 13 Sep 2016 13:18:28 -0400</pubDate>
      
      <guid>https://devbj.com/golangkorea/golang-internals/part1/</guid>
      <description>이 블로그 시리즈는 기본적인 Go 언어특성에 이미 익숙하며 좀 더 심도있게 내부구조를 알고자 하는 독자들을 위해 쓰여졌다. 이 포스트는 Go언어의 소스코드의 구조와 Go</description>
    </item>
    
    <item>
      <title>Golang의 내부, 0부: 부록</title>
      <link>https://devbj.com/golangkorea/golang-internals/resources/</link>
      <pubDate>Mon, 12 Sep 2016 13:18:28 -0400</pubDate>
      
      <guid>https://devbj.com/golangkorea/golang-internals/resources/</guid>
      <description>Go 언어의 최신 컴파일러에 대한 내용 GopherCon 2016: Rob Pike - The Design of the Go Assembler Video Slides GopherCon 2014 Go from C to Go by Russ Cox Video Slides GopherFest 2015: Rob Pike on the move from C to Go in the toolchain Video Slides Go의 어셈블러 A Quick Guide to Go&amp;rsquo;s Assembler</description>
    </item>
    
    <item>
      <title>Go의 주요 특징들</title>
      <link>https://devbj.com/golangkorea/go-start/feature/</link>
      <pubDate>Mon, 12 Sep 2016 13:10:03 +0900</pubDate>
      
      <guid>https://devbj.com/golangkorea/go-start/feature/</guid>
      <description>단순함 Go 언어는 단순함(simplicity)과 실용성(pragmatism)을 지향하는 언어로 이 두가지 철학이 다른 모든 것들 보다 상위에 있다. go 언어</description>
    </item>
    
    <item>
      <title>Go언어 시작하기</title>
      <link>https://devbj.com/golangkorea/go-start/getting-start/</link>
      <pubDate>Sun, 28 Aug 2016 15:10:07 +0830</pubDate>
      
      <guid>https://devbj.com/golangkorea/go-start/getting-start/</guid>
      <description>Go 언어에 대해서 구글이 2009년에 만든 비교적 새로운 프로그래밍 언어다. 2009년이면 거의 7년 이상된 구닥다리 언어잖아? 라고 생각 할 수 있겠으나, Rub</description>
    </item>
    
    <item>
      <title>시리즈 #5 - 사이트에 블로그 올리는 방법</title>
      <link>https://devbj.com/golangkorea/hugo-intro/how-to-contribute-content/</link>
      <pubDate>Tue, 23 Aug 2016 23:25:55 -0400</pubDate>
      
      <guid>https://devbj.com/golangkorea/hugo-intro/how-to-contribute-content/</guid>
      <description>사이트에 블로그 올리는 방법 Golang Korean Community 사이트는 깃헙의 golangkorea Organization의 웹사이트로 GitHub Pages를 이용해 제작되고 있습니다. 현존하는 Static Site Gene</description>
    </item>
    
    <item>
      <title>시리즈 #4 - 분류(Taxonomy)기능 사용하기</title>
      <link>https://devbj.com/golangkorea/hugo-intro/taxonomy-basic/</link>
      <pubDate>Tue, 23 Aug 2016 23:25:44 -0400</pubDate>
      
      <guid>https://devbj.com/golangkorea/hugo-intro/taxonomy-basic/</guid>
      <description>분류(Taxonomy)기능 사용하기 사이트에 컨텐트가 많아 질 수록 고민이 생깁니다. 비숫한 주제의 컨텐트를 한 곳에 나열해 주는 페이지를 만들수는 없는가? 순</description>
    </item>
    
    <item>
      <title>시리즈 #3 - 사이트 테마 개발하기</title>
      <link>https://devbj.com/golangkorea/hugo-intro/theme-customizing/</link>
      <pubDate>Tue, 23 Aug 2016 23:25:30 -0400</pubDate>
      
      <guid>https://devbj.com/golangkorea/hugo-intro/theme-customizing/</guid>
      <description>사이트 테마 개발하기 시리즈 1 마지막에 hugo-octopress 테마를 사용하여 처음으로 사이트를 구축한 기억을 하실 겁니다. 사이트를 구축하기 전에 Hugo에서 사용할 수 있는 테마가</description>
    </item>
    
    <item>
      <title>시리즈 #2 - 컨텐츠 제작 기초</title>
      <link>https://devbj.com/golangkorea/hugo-intro/content-basic/</link>
      <pubDate>Tue, 23 Aug 2016 23:25:04 -0400</pubDate>
      
      <guid>https://devbj.com/golangkorea/hugo-intro/content-basic/</guid>
      <description>컨텐츠 제작 기초 컨텐츠를 제작하면서 꼭 알아야 할 몇가지 개념을 정리하겠습니다. 컨텐츠의 조직적인 관리 (Organization) 사이트가 많은 양의 컨텐츠를 보유하게 되면서 조직적인 관</description>
    </item>
    
    <item>
      <title>시리즈 #1 - Hugo 시작하기</title>
      <link>https://devbj.com/golangkorea/hugo-intro/getting-started/</link>
      <pubDate>Tue, 23 Aug 2016 23:24:55 -0400</pubDate>
      
      <guid>https://devbj.com/golangkorea/hugo-intro/getting-started/</guid>
      <description>Hugo 시작하기 Hugo는 Go로 제작되고 하나의 실행파일로 배포됩니다. 다양한 설치 방법이 있지만 우선 Package Manager를 쓰시는 분들을 중심으로 살펴보겠습니다</description>
    </item>
    
    <item>
      <title>Hugo 입문 - 개요</title>
      <link>https://devbj.com/golangkorea/hugo-intro/overview/</link>
      <pubDate>Tue, 23 Aug 2016 22:35:57 -0400</pubDate>
      
      <guid>https://devbj.com/golangkorea/hugo-intro/overview/</guid>
      <description>Hugo는 현존하는 가장 빠른 정적 사이트 제너레이터(Static Site Generator)로 알려져 있습니다. 기능적인 측면에서도 여타 동적 사이트 제너레이</description>
    </item>
    
    <item>
      <title>vim-go를 이용한 go 개발 환경 구축</title>
      <link>https://devbj.com/golangkorea/vim-go/</link>
      <pubDate>Mon, 22 Aug 2016 22:57:14 +0900</pubDate>
      
      <guid>https://devbj.com/golangkorea/vim-go/</guid>
      <description>Vim Vim은 Emacs와 함께 (적어도 리눅스에서는) 가장 널리 사용하는 에디터일 것이다. 가볍고 빠르며, 어디에서나 실행되기 때문에 그 단순함에도 불구하고 여</description>
    </item>
    
    <item>
      <title>Golang 프로젝트에 TDD 도입하기</title>
      <link>https://devbj.com/golangkorea/tdd-with-golang/</link>
      <pubDate>Sat, 20 Aug 2016 12:15:44 +0900</pubDate>
      
      <guid>https://devbj.com/golangkorea/tdd-with-golang/</guid>
      <description>여기에서 사용한 테스트 코드는 Bitbucket 에서 다운로드 할 수 있다. TDD 클라우드와 MSA와 REST의 등장으로 TDD가 재조명 받고 있다. TDD를 제대로 적용하려면 상당</description>
    </item>
    
    <item>
      <title>Attachments</title>
      <link>https://devbj.com/hugolearntheme/shortcodes/attachments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devbj.com/hugolearntheme/shortcodes/attachments/</guid>
      <description>The Attachments shortcode displays a list of files attached to a page.
  Attachments   BachGavotteShort.mp3  (357 ko)   Carroll_AliceAuPaysDesMerveilles.pdf  (175 ko)   adivorciarsetoca00cape.pdf  (361 ko)   hugo.png  (17 ko)   movieselectricsheep-flock-244-32500-2.mp4  (340 ko)    Usage The shortcurt lists files found in a specific folder. Currently, it support two implementations for pages
  If your page is a markdown file, attachements must be place in a folder named like your page and ending with .</description>
    </item>
    
    <item>
      <title>Button</title>
      <link>https://devbj.com/blog/button/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devbj.com/blog/button/</guid>
      <description>A button is a just a clickable button with optional icon.
{{% button href=&amp;quot;https://getgrav.org/&amp;quot; %}}Get Grav{{% /button %}} {{% button href=&amp;quot;https://getgrav.org/&amp;quot; icon=&amp;quot;fas fa-download&amp;quot; %}}Get Grav with icon{{% /button %}} {{% button href=&amp;quot;https://getgrav.org/&amp;quot; icon=&amp;quot;fas fa-download&amp;quot; icon-position=&amp;quot;right&amp;quot; %}}Get Grav with icon right{{% /button %}}  Get Grav   Get Grav with icon  Get Grav with icon right   </description>
    </item>
    
    <item>
      <title>Button</title>
      <link>https://devbj.com/hugolearntheme/shortcodes/button/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devbj.com/hugolearntheme/shortcodes/button/</guid>
      <description>A button is a just a clickable button with optional icon.
{{% button href=&amp;quot;https://getgrav.org/&amp;quot; %}}Get Grav{{% /button %}} {{% button href=&amp;quot;https://getgrav.org/&amp;quot; icon=&amp;quot;fas fa-download&amp;quot; %}}Get Grav with icon{{% /button %}} {{% button href=&amp;quot;https://getgrav.org/&amp;quot; icon=&amp;quot;fas fa-download&amp;quot; icon-position=&amp;quot;right&amp;quot; %}}Get Grav with icon right{{% /button %}}  Get Grav   Get Grav with icon  Get Grav with icon right   </description>
    </item>
    
    <item>
      <title>Expand</title>
      <link>https://devbj.com/blog/expand/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devbj.com/blog/expand/</guid>
      <description>The Expand shortcode displays an expandable/collapsible section of text on your page. Here is an example
  Expand me...   Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.</description>
    </item>
    
    <item>
      <title>Expand</title>
      <link>https://devbj.com/hugolearntheme/shortcodes/expand/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devbj.com/hugolearntheme/shortcodes/expand/</guid>
      <description>The Expand shortcode displays an expandable/collapsible section of text on your page. Here is an example
  Expand me...   Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.</description>
    </item>
    
    <item>
      <title>Mermaid</title>
      <link>https://devbj.com/blog/mermaid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devbj.com/blog/mermaid/</guid>
      <description>Mermaid is a library helping you to generate diagram and flowcharts from text, in a similar manner as Markdown.
Just insert your mermaid code in the mermaid shortcode and that&amp;rsquo;s it.
Flowchart example {{&amp;lt;mermaid align=&amp;quot;left&amp;quot;&amp;gt;}} graph LR; A[Hard edge] --&amp;gt;|Link text| B(Round edge) B --&amp;gt; C{Decision} C --&amp;gt;|One| D[Result one] C --&amp;gt;|Two| E[Result two] {{&amp;lt; /mermaid &amp;gt;}}  renders as
graph LR; A[Hard edge] --|Link text| B(Round edge) B -- C{Decision} C --|One| D[Result one] C --|Two| E[Result two]  or you can use this alternative syntax:</description>
    </item>
    
    <item>
      <title>Mermaid</title>
      <link>https://devbj.com/hugolearntheme/shortcodes/mermaid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devbj.com/hugolearntheme/shortcodes/mermaid/</guid>
      <description>Mermaid is a library helping you to generate diagram and flowcharts from text, in a similar manner as Markdown.
Just insert your mermaid code in the mermaid shortcode and that&amp;rsquo;s it.
Flowchart example {{&amp;lt;mermaid align=&amp;quot;left&amp;quot;&amp;gt;}} graph LR; A[Hard edge] --&amp;gt;|Link text| B(Round edge) B --&amp;gt; C{Decision} C --&amp;gt;|One| D[Result one] C --&amp;gt;|Two| E[Result two] {{&amp;lt; /mermaid &amp;gt;}}  renders as
graph LR; A[Hard edge] --|Link text| B(Round edge) B -- C{Decision} C --|One| D[Result one] C --|Two| E[Result two]  or you can use this alternative syntax:</description>
    </item>
    
    <item>
      <title>Notice</title>
      <link>https://devbj.com/hugolearntheme/shortcodes/notice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devbj.com/hugolearntheme/shortcodes/notice/</guid>
      <description>The notice shortcode shows 4 types of disclaimers to help you structure your page.
Note {{% notice note %}} A notice disclaimer {{% /notice %}} renders as
A notice disclaimer
 Info {{% notice info %}} An information disclaimer {{% /notice %}} renders as
An information disclaimer
 Tip {{% notice tip %}} A tip disclaimer {{% /notice %}} renders as
A tip disclaimer
 Warning {{% notice warning %}} A warning disclaimer {{% /notice %}} renders as</description>
    </item>
    
    <item>
      <title>page test</title>
      <link>https://devbj.com/hugolearntheme/shortcodes/children/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devbj.com/hugolearntheme/shortcodes/children/test/</guid>
      <description>This is a test demo child page</description>
    </item>
    
    <item>
      <title>page test</title>
      <link>https://devbj.com/hugolearntheme/shortcodes/children/test.fr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devbj.com/hugolearntheme/shortcodes/children/test.fr/</guid>
      <description>Ceci est une page de demo</description>
    </item>
    
    <item>
      <title>page test 3</title>
      <link>https://devbj.com/hugolearntheme/shortcodes/children/children-2/test3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devbj.com/hugolearntheme/shortcodes/children/children-2/test3/</guid>
      <description>This is a test 3 demo child page</description>
    </item>
    
    <item>
      <title>page test 3</title>
      <link>https://devbj.com/hugolearntheme/shortcodes/children/children-2/test3.fr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devbj.com/hugolearntheme/shortcodes/children/children-2/test3.fr/</guid>
      <description>Ceci est une page de demo test 3</description>
    </item>
    
    <item>
      <title>Site param</title>
      <link>https://devbj.com/hugolearntheme/shortcodes/siteparam/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devbj.com/hugolearntheme/shortcodes/siteparam/</guid>
      <description>siteparam shortcode is used to help you print values of site params.
For instance, in this current site, the editURL variable is used in config.toml
[params] editURL = &amp;#34;https://github.com/matcornic/hugo-theme-learn/edit/master/exampleSite/content/&amp;#34; Use the siteparam shortcode to display its value.
`editURL` Value : {{% siteparam &amp;quot;editURL&amp;quot; %}} is displayed as
editURL Value : https://github.com/bjnhur/mydocs/edit/master/content/</description>
    </item>
    
  </channel>
</rss>